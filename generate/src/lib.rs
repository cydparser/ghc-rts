use std::collections::HashSet;

use proc_macro2::Span;
use syn::Ident;

pub struct InternalSymbols {
    consts: HashSet<Ident>,
    funcs: HashSet<Ident>,
    statics: HashSet<Ident>,
    structs: HashSet<Ident>,
    types: HashSet<Ident>,
}

impl InternalSymbols {
    pub fn new() -> InternalSymbols {
        fn insert_ident(idents: &mut HashSet<Ident>, sym: &str) {
            idents.insert(Ident::new(sym, Span::call_site()));
        }

        InternalSymbols {
            consts: {
                let mut hs = HashSet::new();
                for s in [
                    "BACKTRACE_CHUNK_SZ",
                    "BDESCR_MASK",
                    "BDESCR_SHIFT",
                    "BDESCR_SIZE",
                    "BF_COMPACT",
                    "BF_EVACUATED",
                    "BF_EXEC",
                    "BF_FLAG_MAX",
                    "BF_FRAGMENTED",
                    "BF_KNOWN",
                    "BF_LARGE",
                    "BF_MARKED",
                    "BF_NONMOVING",
                    "BF_NONMOVING_SWEEPING",
                    "BF_PINNED",
                    "BF_SWEPT",
                    "BITMAP_SIZE_MASK",
                    "BITS_PER_BYTE",
                    "BLOCK_MASK",
                    "BLOCK_SHIFT",
                    "DEBUG_IS_ON",
                    "DEFAULT_LINKER_ALWAYS_PIC",
                    "EXIT_DEADLOCK",
                    "EXIT_HEAPOVERFLOW",
                    "EXIT_INTERRUPTED",
                    "EXIT_KILLED",
                    "EventLogStatus_EVENTLOG_NOT_CONFIGURED",
                    "EventLogStatus_EVENTLOG_NOT_SUPPORTED",
                    "EventLogStatus_EVENTLOG_RUNNING",
                    "FMT_HexSizeT",
                    "FMT_HexWord",
                    "FMT_HexWord16",
                    "FMT_HexWord32",
                    "FMT_HexWord64",
                    "FMT_HexWord8",
                    "FMT_Int32",
                    "FMT_Int64",
                    "FMT_SizeT",
                    "FMT_StgThreadID",
                    "FMT_Word16",
                    "FMT_Word64",
                    "FMT_Word8",
                    "GR_FILENAME_FMT",
                    "HP_FILENAME_FMT",
                    "HS_BOOL_FALSE",
                    "HS_BOOL_MAX",
                    "HS_BOOL_MIN",
                    "HS_CHAR_MAX",
                    "HS_CHAR_MIN",
                    "HS_INT16_MAX",
                    "HS_INT16_MIN",
                    "HS_INT32_MAX",
                    "HS_INT32_MIN",
                    "HS_INT8_MAX",
                    "HS_INT8_MIN",
                    "HS_WORD16_MAX",
                    "HS_WORD32_MAX",
                    "HS_WORD8_MAX",
                    "INFO_FIRST_TAG",
                    "INFO_IND_TAG",
                    "INFO_OTHER_TAG",
                    "INVALID_GHC_POINTER",
                    "LDV_LAST_MASK",
                    "LDV_STATE_MASK",
                    "LIFE_FILENAME_FMT",
                    "MAX_NUMA_NODES",
                    "MAX_SPARE_WORKERS",
                    "MAX_SPEC_CONSTR_SIZE",
                    "MAX_SPEC_FUN_SIZE",
                    "MAX_SPEC_THUNK_SIZE",
                    "MBLOCK_MASK",
                    "MBLOCK_SHIFT",
                    "OStatus_OBJECT_DONT_RESOLVE",
                    "OStatus_OBJECT_LOADED",
                    "OStatus_OBJECT_NEEDED",
                    "OStatus_OBJECT_NOT_LOADED",
                    "OStatus_OBJECT_READY",
                    "OStatus_OBJECT_RESOLVED",
                    "OStatus_OBJECT_UNLOADED",
                    "PROF_FILENAME_FMT",
                    "PROF_FILENAME_FMT_GUM",
                    "QP_FILENAME_FMT",
                    "RTS_USER_SIGNALS",
                    "RtsOptsEnabledEnum_RtsOptsAll",
                    "RtsOptsEnabledEnum_RtsOptsIgnore",
                    "RtsOptsEnabledEnum_RtsOptsIgnoreAll",
                    "RtsOptsEnabledEnum_RtsOptsNone",
                    "RtsOptsEnabledEnum_RtsOptsSafeOnly",
                    "SPIN_COUNT",
                    "STACK_SANE",
                    "STATS_FILENAME_MAXLEN",
                    "STAT_FILENAME_FMT",
                    "STG_INT16_MIN",
                    "STG_INT32_MIN",
                    "STG_INT8_MIN",
                    "STG_RETURN",
                    "STG_RUN",
                    "STG_RUN_STACK_FRAME_SIZE",
                    "SchedulerStatus_HeapExhausted",
                    "SchedulerStatus_Interrupted",
                    "SchedulerStatus_Killed",
                    "SchedulerStatus_NoStatus",
                    "SchedulerStatus_Success",
                    "TICKY_FILENAME_FMT",
                    "TIME_FILENAME_FMT",
                    "TIME_FILENAME_FMT_GUM",
                    "TIME_RESOLUTION",
                    "TREC_CHUNK_NUM_ENTRIES",
                    "TRecState_TREC_ABORTED",
                    "TRecState_TREC_ACTIVE",
                    "TRecState_TREC_CONDEMNED",
                    "TRecState_TREC_WAITING",
                    "ThreadYielding",
                    "WORD_SIZE_IN_BITS_FLOAT",
                ] {
                    insert_ident(&mut hs, s);
                }
                hs
            },
            funcs: {
                let mut hs = HashSet::new();
                for s in [
                    "allocBlockOnNode_lock",
                    "allocBlock_lock",
                    "allocGroup",
                    "allocGroupOnNode",
                    "allocGroupOnNode_lock",
                    "allocMBlockAlignedGroupOnNode",
                    "allocateMightFail",
                    "closeCondition",
                    "closeMutex",
                    "closure_sizeW_",
                    "createAttachedOSThread",
                    "createIOThread",
                    "createStrictIOThread",
                    "dirty_STACK",
                    "dirty_TSO",
                    "eventLogStatus",
                    "exitHpc",
                    "foreignExportStablePtr",
                    "freeAllMBlocks",
                    "freeChain",
                    "freeChain_lock",
                    "freeFullProgArgv",
                    "freeGroup",
                    "freeThreadLocalKey",
                    "freeThreadingResources",
                    "getFirstMBlock",
                    "getMBlock",
                    "getMBlockOnNode",
                    "getMBlocksOnNode",
                    "getNextMBlock",
                    "getStablePtr",
                    "getThreadLocalVar",
                    "ghc_tsan_atomic16_compare_exchange",
                    "ghc_tsan_atomic32_compare_exchange",
                    "ghc_tsan_atomic64_compare_exchange",
                    "ghc_tsan_atomic8_compare_exchange",
                    "heap_view_closurePtrs",
                    "heap_view_closure_ptrs_in_pap_payload",
                    "hs_exit_nowait",
                    "hs_free_fun_ptr",
                    "hs_free_stable_ptr_unsafe",
                    "hs_lock_stable_ptr_table",
                    "hs_lock_stable_tables",
                    "hs_restoreConsoleCP",
                    "hs_set_argv",
                    "hs_unlock_stable_ptr_table",
                    "hs_unlock_stable_tables",
                    "initBlockAllocator",
                    "initMBlocks",
                    "insertSymbol",
                    "interruptOSThread",
                    "joinOSThread",
                    "kernelThreadId",
                    "libdwPrintBacktrace",
                    "listAllBlocks",
                    "newGCdCAF",
                    "newRetainedCAF",
                    "newThreadLocalKey",
                    "osThreadId",
                    "osThreadIsAlive",
                    "releaseThreadNode",
                    "rtsBadAlignmentBarf",
                    "rtsDebugMsgFn",
                    "rtsErrorMsgFn",
                    "rtsFatalInternalErrorFn",
                    "rtsSysErrorMsgFn",
                    "rts_done",
                    "scheduleWaitThread",
                    "setFullProgArgv",
                    "setTSOLink",
                    "setTSOPrev",
                    "setThreadAffinity",
                    "setThreadLocalVar",
                    "setThreadNode",
                    "shutdownHaskell",
                    "signalCondition",
                    "startupHaskell",
                    "startupHpc",
                    "stg_CONTINUATION_apply",
                    "stg_addCFinalizzerToWeakzh",
                    "stg_ap_d_fast",
                    "stg_ap_f_fast",
                    "stg_ap_l_fast",
                    "stg_ap_pppp_fast",
                    "stg_ap_ppppp_fast",
                    "stg_ap_pppppp_fast",
                    "stg_ap_pppv_fast",
                    "stg_ap_ppv_fast",
                    "stg_ap_pv_fast",
                    "stg_ap_stk_v16",
                    "stg_ap_stk_v32",
                    "stg_ap_stk_v64",
                    "stg_atomicModifyMutVar2zh",
                    "stg_atomicModifyMutVarzuzh",
                    "stg_atomicallyzh",
                    "stg_block_blackhole",
                    "stg_block_blackhole_finally",
                    "stg_block_noregs",
                    "stg_block_putmvar",
                    "stg_block_readmvar",
                    "stg_block_stmwait",
                    "stg_block_takemvar",
                    "stg_block_throwto",
                    "stg_casArrayzh",
                    "stg_casInt16Arrayzh",
                    "stg_casInt32Arrayzh",
                    "stg_casInt64Arrayzh",
                    "stg_casInt8Arrayzh",
                    "stg_casIntArrayzh",
                    "stg_casMutVarzh",
                    "stg_casSmallArrayzh",
                    "stg_castDoubleToWord64zh",
                    "stg_castFloatToWord32zh",
                    "stg_castWord32ToFloatzh",
                    "stg_castWord64ToDoublezh",
                    "stg_catchRetryzh",
                    "stg_catchSTMzh",
                    "stg_catchzh",
                    "stg_clearCCSzh",
                    "stg_cloneArrayzh",
                    "stg_cloneMutableArrayzh",
                    "stg_cloneSmallArrayzh",
                    "stg_cloneSmallMutableArrayzh",
                    "stg_closureSizzezh",
                    "stg_compactAddWithSharingzh",
                    "stg_compactAddzh",
                    "stg_compactAllocateBlockzh",
                    "stg_compactAppendzh",
                    "stg_compactContainsAnyzh",
                    "stg_compactContainszh",
                    "stg_compactFixupPointerszh",
                    "stg_compactGetFirstBlockzh",
                    "stg_compactGetNextBlockzh",
                    "stg_compactGetRootzh",
                    "stg_compactNewzh",
                    "stg_compactResizzezh",
                    "stg_compactSizzezh",
                    "stg_control0zh",
                    "stg_control0zh_ll",
                    "stg_copyArrayzh",
                    "stg_copyMutableArrayzh",
                    "stg_copySmallArrayzh",
                    "stg_copySmallMutableArrayzh",
                    "stg_deRefStablePtrzh",
                    "stg_deRefWeakzh",
                    "stg_decodeDoublezu2Intzh",
                    "stg_decodeDoublezuInt64zh",
                    "stg_decodeFloatzuIntzh",
                    "stg_delayzh",
                    "stg_finalizzeWeakzh",
                    "stg_forkOnzh",
                    "stg_forkzh",
                    "stg_freezzeArrayzh",
                    "stg_freezzeSmallArrayzh",
                    "stg_gc_prim",
                    "stg_gc_prim_n",
                    "stg_gc_prim_p",
                    "stg_gc_prim_p_ll",
                    "stg_gc_prim_pp",
                    "stg_gc_prim_pp_ll",
                    "stg_getApStackValzh",
                    "stg_getMaskingStatezh",
                    "stg_getSparkzh",
                    "stg_isByteArrayPinnedzh",
                    "stg_isByteArrayWeaklyPinnedzh",
                    "stg_isCurrentThreadBoundzh",
                    "stg_isEmptyMVarzh",
                    "stg_isMutableByteArrayPinnedzh",
                    "stg_isMutableByteArrayWeaklyPinnedzh",
                    "stg_keepAlivezh",
                    "stg_killMyself",
                    "stg_killThreadzh",
                    "stg_labelThreadzh",
                    "stg_listThreadszh",
                    "stg_makeStableNamezh",
                    "stg_makeStablePtrzh",
                    "stg_maskAsyncExceptionszh",
                    "stg_maskUninterruptiblezh",
                    "stg_mkApUpd0zh",
                    "stg_mkWeakForeignzh",
                    "stg_mkWeakNoFinalizzerzh",
                    "stg_mkWeakzh",
                    "stg_myThreadIdzh",
                    "stg_newAlignedPinnedByteArrayzh",
                    "stg_newArrayzh",
                    "stg_newBCOzh",
                    "stg_newByteArrayzh",
                    "stg_newIOPortzh",
                    "stg_newMVarzh",
                    "stg_newMutVarzh",
                    "stg_newPinnedByteArrayzh",
                    "stg_newPromptTagzh",
                    "stg_newSmallArrayzh",
                    "stg_newTVarzh",
                    "stg_noDuplicatezh",
                    "stg_numSparkszh",
                    "stg_overwritingClosure",
                    "stg_overwritingClosureSize",
                    "stg_overwritingMutableClosureOfs",
                    "stg_promptzh",
                    "stg_putMVarzh",
                    "stg_raiseDivZZerozh",
                    "stg_raiseIOzh",
                    "stg_raiseOverflowzh",
                    "stg_raiseUnderflowzh",
                    "stg_raisezh",
                    "stg_readIOPortzh",
                    "stg_readMVarzh",
                    "stg_readTVarIOzh",
                    "stg_readTVarzh",
                    "stg_resizzeMutableByteArrayzh",
                    "stg_retryzh",
                    "stg_returnToSched",
                    "stg_returnToSchedButFirst",
                    "stg_returnToSchedNotPaused",
                    "stg_runRWzh",
                    "stg_setThreadAllocationCounterzh",
                    "stg_shrinkMutableByteArrayzh",
                    "stg_shrinkSmallMutableArrayzh",
                    "stg_stk_save_v16",
                    "stg_stk_save_v64",
                    "stg_takeMVarzh",
                    "stg_thawArrayzh",
                    "stg_thawSmallArrayzh",
                    "stg_threadFinished",
                    "stg_threadLabelzh",
                    "stg_threadStatuszh",
                    "stg_traceBinaryEventzh",
                    "stg_traceEventzh",
                    "stg_traceMarkerzh",
                    "stg_tryPutMVarzh",
                    "stg_tryReadMVarzh",
                    "stg_tryTakeMVarzh",
                    "stg_unmaskAsyncExceptionszh",
                    "stg_unpackClosurezh",
                    "stg_unsafeThawArrayzh",
                    "stg_unsafeThawSmallArrayzh",
                    "stg_waitReadzh",
                    "stg_waitWritezh",
                    "stg_whereFromzh",
                    "stg_writeIOPortzh",
                    "stg_writeTVarzh",
                    "stg_yield_noregs",
                    "stg_yield_to_interpreter",
                    "stg_yieldzh",
                    "sysErrorBelch",
                    "timedWaitCondition",
                    "vdebugBelch",
                    "verrorBelch",
                    "vsysErrorBelch",
                    "warnMissingKBLibraryPaths",
                    "yieldThread",
                    "stg_ap_v_fast",
                ] {
                    insert_ident(&mut hs, s);
                }
                hs
            },
            statics: {
                let mut hs = HashSet::new();
                for s in [
                    "ALLOC_BH_adm",
                    "ALLOC_BH_ctr",
                    "ALLOC_BH_gds",
                    "ALLOC_BH_slp",
                    "ALLOC_CON_adm",
                    "ALLOC_CON_slp",
                    "ALLOC_FUN_adm",
                    "ALLOC_FUN_slp",
                    "ALLOC_PAP_adm",
                    "ALLOC_STACK_ctr",
                    "ALLOC_STACK_tot",
                    "ALLOC_THK_adm",
                    "ALLOC_TSO_ctr",
                    "ALLOC_TSO_tot",
                    "ALLOC_TUP_adm",
                    "ALLOC_TUP_ctr",
                    "ALLOC_TUP_gds",
                    "ALLOC_TUP_slp",
                    "CATCHF_PUSHED_ctr",
                    "ENT_AP_STACK_ctr",
                    "ENT_AP_ctr",
                    "ENT_BH_ctr",
                    "ENT_CONTINUATION_ctr",
                    "ENT_DYN_IND_ctr",
                    "ENT_PAP_ctr",
                    "ENT_PERM_IND_ctr",
                    "ENT_STATIC_CON_ctr",
                    "ENT_STATIC_IND_ctr",
                    "FileEventLogWriter",
                    "GC_FAILED_PROMOTION_ctr",
                    "GC_SEL_ABANDONED_ctr",
                    "GC_SEL_MAJOR_ctr",
                    "GC_SEL_MINOR_ctr",
                    "MULTI_CHUNK_SLOW_CALL_CHUNKS_ctr",
                    "MULTI_CHUNK_SLOW_CALL_ctr",
                    "NullEventLogWriter",
                    "RET_SEMI_loads_avoided",
                    "SLOW_CALL_FUN_CORRECT_ctr",
                    "SLOW_CALL_FUN_TOO_FEW_ctr",
                    "SLOW_CALL_FUN_TOO_MANY_ctr",
                    "SLOW_CALL_PAP_CORRECT_ctr",
                    "SLOW_CALL_PAP_TOO_FEW_ctr",
                    "SLOW_CALL_PAP_TOO_MANY_ctr",
                    "SLOW_CALL_UNEVALD_ctr",
                    "SLOW_CALL_ctr",
                    "SLOW_CALL_fast_d_ctr",
                    "SLOW_CALL_fast_f_ctr",
                    "SLOW_CALL_fast_l_ctr",
                    "SLOW_CALL_fast_n_ctr",
                    "SLOW_CALL_fast_p_ctr",
                    "SLOW_CALL_fast_pp_ctr",
                    "SLOW_CALL_fast_ppp_ctr",
                    "SLOW_CALL_fast_pppp_ctr",
                    "SLOW_CALL_fast_ppppp_ctr",
                    "SLOW_CALL_fast_pppppp_ctr",
                    "SLOW_CALL_fast_pppv_ctr",
                    "SLOW_CALL_fast_ppv_ctr",
                    "SLOW_CALL_fast_pv_ctr",
                    "SLOW_CALL_fast_v16_ctr",
                    "SLOW_CALL_fast_v_ctr",
                    "TAG_TAGGED_miss",
                    "UPDF_RCC_OMITTED_ctr",
                    "UPDF_RCC_PUSHED_ctr",
                    "UPD_BH_UPDATABLE_ctr",
                    "UPD_CON_IN_NEW_ctr",
                    "UPD_CON_IN_PLACE_ctr",
                    "UPD_NEW_IND_ctr",
                    "UPD_NEW_PERM_IND_ctr",
                    "UPD_OLD_IND_ctr",
                    "UPD_OLD_PERM_IND_ctr",
                    "UPD_PAP_IN_NEW_ctr",
                    "UPD_PAP_IN_PLACE_ctr",
                    "UPD_SQUEEZED_ctr",
                    "closure_flags",
                    "debugMsgFn",
                    "errorMsgFn",
                    "exitFn",
                    "fatalInternalErrorFn",
                    "ghczminternal_GHCziInternalziTopHandler_runIO_closure",
                    "large_alloc_lim",
                    "oldest_gen",
                    "peak_mblocks_allocated",
                    "prog_argc",
                    "prog_argv",
                    "prog_name",
                    "rts_argc",
                    "rts_argv",
                    "stable_name_table",
                    "stable_ptr_table",
                    "stg_AP_NOUPD_info",
                    "stg_AP_STACK_NOUPD_info",
                    "stg_AP_STACK_info",
                    "stg_AP_info",
                    "stg_BLACKHOLE_info",
                    "stg_BLOCKING_QUEUE_CLEAN_info",
                    "stg_BLOCKING_QUEUE_DIRTY_info",
                    "stg_CAF_BLACKHOLE_info",
                    "stg_CHARLIKE_closure",
                    "stg_COMPACT_NFDATA_CLEAN_info",
                    "stg_COMPACT_NFDATA_DIRTY_info",
                    "stg_CONTINUATION_info",
                    "stg_C_FINALIZER_LIST_info",
                    "stg_DEAD_WEAK_info",
                    "stg_END_STM_CHUNK_LIST_closure",
                    "stg_END_STM_CHUNK_LIST_info",
                    "stg_END_STM_WATCH_QUEUE_closure",
                    "stg_END_STM_WATCH_QUEUE_info",
                    "stg_END_TSO_QUEUE_info",
                    "stg_EVACUATED_info",
                    "stg_GCD_CAF_info",
                    "stg_IND_info",
                    "stg_MSG_BLACKHOLE_info",
                    "stg_MSG_CLONE_STACK_info",
                    "stg_MSG_NULL_info",
                    "stg_MSG_THROWTO_info",
                    "stg_MSG_TRY_WAKEUP_info",
                    "stg_MUT_ARR_PTRS_CLEAN_info",
                    "stg_MUT_ARR_PTRS_DIRTY_info",
                    "stg_MUT_ARR_WORDS_info",
                    "stg_MUT_VAR_CLEAN_info",
                    "stg_MUT_VAR_DIRTY_info",
                    "stg_MVAR_CLEAN_info",
                    "stg_MVAR_DIRTY_info",
                    "stg_MVAR_TSO_QUEUE_info",
                    "stg_NO_FINALIZER_closure",
                    "stg_NO_FINALIZER_info",
                    "stg_NO_TREC_closure",
                    "stg_NO_TREC_info",
                    "stg_PROMPT_TAG_info",
                    "stg_RUBBISH_ENTRY_info",
                    "stg_SMALL_MUT_ARR_PTRS_CLEAN_info",
                    "stg_SMALL_MUT_ARR_PTRS_DIRTY_info",
                    "stg_SMALL_MUT_ARR_PTRS_FROZEN_CLEAN_info",
                    "stg_SMALL_MUT_ARR_PTRS_FROZEN_DIRTY_info",
                    "stg_SRT_10_info",
                    "stg_SRT_11_info",
                    "stg_SRT_12_info",
                    "stg_SRT_13_info",
                    "stg_SRT_14_info",
                    "stg_SRT_15_info",
                    "stg_SRT_2_info",
                    "stg_SRT_3_info",
                    "stg_SRT_4_info",
                    "stg_SRT_5_info",
                    "stg_SRT_6_info",
                    "stg_SRT_7_info",
                    "stg_SRT_8_info",
                    "stg_SRT_9_info",
                    "stg_STABLE_NAME_info",
                    "stg_STM_AWOKEN_closure",
                    "stg_STM_AWOKEN_info",
                    "stg_TREC_CHUNK_info",
                    "stg_TREC_HEADER_info",
                    "stg_TSO_info",
                    "stg_TVAR_CLEAN_info",
                    "stg_TVAR_DIRTY_info",
                    "stg_TVAR_WATCH_QUEUE_info",
                    "stg_WEAK_info",
                    "stg_WHITEHOLE_info",
                    "stg_ap_1_upd_info",
                    "stg_ap_2_upd_info",
                    "stg_ap_3_upd_info",
                    "stg_ap_4_upd_info",
                    "stg_ap_5_upd_info",
                    "stg_ap_6_upd_info",
                    "stg_ap_7_upd_info",
                    "stg_ap_d_info",
                    "stg_ap_f_info",
                    "stg_ap_l_info",
                    "stg_ap_n_info",
                    "stg_ap_p_info",
                    "stg_ap_ppp_info",
                    "stg_ap_pppp_info",
                    "stg_ap_ppppp_info",
                    "stg_ap_pppppp_info",
                    "stg_ap_pppv_info",
                    "stg_ap_ppv_info",
                    "stg_ap_pv_info",
                    "stg_ap_v16_info",
                    "stg_ap_v32_info",
                    "stg_ap_v64_info",
                    "stg_apply_interp_info",
                    "stg_atomically_info",
                    "stg_atomically_waiting_frame_info",
                    "stg_block_putmvar_info",
                    "stg_block_readmvar_info",
                    "stg_block_takemvar_info",
                    "stg_block_throwto_info",
                    "stg_catch_info",
                    "stg_ctoi_D1_info",
                    "stg_ctoi_F1_info",
                    "stg_ctoi_L1_info",
                    "stg_ctoi_R1n_info",
                    "stg_ctoi_R1p_info",
                    "stg_ctoi_V_info",
                    "stg_ctoi_t0_info",
                    "stg_ctoi_t10_info",
                    "stg_ctoi_t11_info",
                    "stg_ctoi_t12_info",
                    "stg_ctoi_t13_info",
                    "stg_ctoi_t14_info",
                    "stg_ctoi_t15_info",
                    "stg_ctoi_t16_info",
                    "stg_ctoi_t17_info",
                    "stg_ctoi_t18_info",
                    "stg_ctoi_t19_info",
                    "stg_ctoi_t1_info",
                    "stg_ctoi_t20_info",
                    "stg_ctoi_t21_info",
                    "stg_ctoi_t22_info",
                    "stg_ctoi_t23_info",
                    "stg_ctoi_t24_info",
                    "stg_ctoi_t25_info",
                    "stg_ctoi_t26_info",
                    "stg_ctoi_t27_info",
                    "stg_ctoi_t28_info",
                    "stg_ctoi_t29_info",
                    "stg_ctoi_t2_info",
                    "stg_ctoi_t30_info",
                    "stg_ctoi_t31_info",
                    "stg_ctoi_t32_info",
                    "stg_ctoi_t33_info",
                    "stg_ctoi_t34_info",
                    "stg_ctoi_t35_info",
                    "stg_ctoi_t36_info",
                    "stg_ctoi_t37_info",
                    "stg_ctoi_t38_info",
                    "stg_ctoi_t39_info",
                    "stg_ctoi_t40_info",
                    "stg_ctoi_t41_info",
                    "stg_ctoi_t42_info",
                    "stg_ctoi_t43_info",
                    "stg_ctoi_t44_info",
                    "stg_ctoi_t45_info",
                    "stg_ctoi_t46_info",
                    "stg_ctoi_t47_info",
                    "stg_ctoi_t48_info",
                    "stg_ctoi_t49_info",
                    "stg_ctoi_t4_info",
                    "stg_ctoi_t50_info",
                    "stg_ctoi_t51_info",
                    "stg_ctoi_t52_info",
                    "stg_ctoi_t53_info",
                    "stg_ctoi_t54_info",
                    "stg_ctoi_t55_info",
                    "stg_ctoi_t56_info",
                    "stg_ctoi_t57_info",
                    "stg_ctoi_t58_info",
                    "stg_ctoi_t59_info",
                    "stg_ctoi_t5_info",
                    "stg_ctoi_t60_info",
                    "stg_ctoi_t61_info",
                    "stg_ctoi_t62_info",
                    "stg_ctoi_t6_info",
                    "stg_ctoi_t7_info",
                    "stg_ctoi_t8_info",
                    "stg_ctoi_t9_info",
                    "stg_dead_thread_info",
                    "stg_dummy_ret_closure",
                    "stg_dummy_ret_info",
                    "stg_enter_info",
                    "stg_forceIO_closure",
                    "stg_forceIO_info",
                    "stg_gc_prim_p_ll_ret_info",
                    "stg_gc_prim_pp_ll_ret_info",
                    "stg_keepAlive_frame_info",
                    "stg_marked_upd_frame_info",
                    "stg_maskAsyncExceptionszh_ret_info",
                    "stg_maskUninterruptiblezh_ret_info",
                    "stg_noDuplicate_info",
                    "stg_noforceIO_info",
                    "stg_noupd_frame_info",
                    "stg_orig_thunk_info_frame_info",
                    "stg_prompt_frame_info",
                    "stg_raise_info",
                    "stg_raise_ret_info",
                    "stg_restore_cccs_eval_info",
                    "stg_ret_d_info",
                    "stg_ret_f_info",
                    "stg_ret_l_info",
                    "stg_ret_v_info",
                    "stg_sel_0_noupd_info",
                    "stg_sel_0_upd_info",
                    "stg_sel_10_noupd_info",
                    "stg_sel_10_upd_info",
                    "stg_sel_11_noupd_info",
                    "stg_sel_11_upd_info",
                    "stg_sel_12_noupd_info",
                    "stg_sel_12_upd_info",
                    "stg_sel_13_noupd_info",
                    "stg_sel_13_upd_info",
                    "stg_sel_14_noupd_info",
                    "stg_sel_14_upd_info",
                    "stg_sel_15_noupd_info",
                    "stg_sel_15_upd_info",
                    "stg_sel_1_noupd_info",
                    "stg_sel_1_upd_info",
                    "stg_sel_2_noupd_info",
                    "stg_sel_2_upd_info",
                    "stg_sel_3_noupd_info",
                    "stg_sel_3_upd_info",
                    "stg_sel_4_noupd_info",
                    "stg_sel_4_upd_info",
                    "stg_sel_5_noupd_info",
                    "stg_sel_5_upd_info",
                    "stg_sel_6_noupd_info",
                    "stg_sel_6_upd_info",
                    "stg_sel_7_noupd_info",
                    "stg_sel_7_upd_info",
                    "stg_sel_8_noupd_info",
                    "stg_sel_8_upd_info",
                    "stg_sel_9_noupd_info",
                    "stg_sel_9_upd_info",
                    "stg_stack_underflow_frame_v16_info",
                    "stg_stack_underflow_frame_v32_info",
                    "stg_stack_underflow_frame_v64_info",
                    "stg_unmaskAsyncExceptionszh_ret_info",
                    "ticky_slow_call_unevald",
                    "ENT_VIA_NODE_ctr",
                ] {
                    insert_ident(&mut hs, s);
                }
                hs
            },
            structs: {
                let mut hs = HashSet::new();
                for s in [
                    "BacktraceChunk_",
                    "Backtrace_",
                    "CapabilityPublic_",
                    "Capability_",
                    "GCDetails_",
                    "InCall_",
                    "InfoProvEnt_",
                    "InfoProv_",
                    "IpeBufferListNode_",
                    "LibdwSession_",
                    "Location_",
                    "MessageBlackHole_",
                    "MessageThrowTo_",
                    "MessageWakeup_",
                    "Message_",
                    "NonmovingSegmentInfo",
                    "PauseToken_",
                    "StgBlockingQueue_",
                    "StgClosureInfo__bindgen_ty_1",
                    "StgClosure_",
                    "StgClosure_",
                    "StgCompactNFDataBlock_",
                    "StgCompactNFData_",
                    "StgConInfoTable_",
                    "StgFunInfoExtraFwd_",
                    "StgFunInfoExtraRev_",
                    "StgFunTable",
                    "StgIndStatic",
                    "StgIntCharlikeClosure",
                    "StgKeepAliveFrame",
                    "StgLargeBitmap_",
                    "StgMVarTSOQueue_",
                    "StgProfInfo",
                    "StgPromptFrame",
                    "StgTRecChunk_",
                    "StgTRecHeader_",
                    "StgTVarWatchQueue_",
                    "StgThunkInfoTable_",
                    "StgThunk_",
                    "StgThunk_",
                    "StgWord128",
                    "StgWord256",
                    "StgWord512",
                    "TRecEntry",
                    "_CONCURRENT_FLAGS",
                    "_COST_CENTRE_FLAGS",
                    "_DEBUG_FLAGS",
                    "_GC_FLAGS",
                    "_HPC_FLAGS",
                    "_HpcModuleInfo",
                    "_MISC_FLAGS",
                    "_ObjectCode",
                    "_PAR_FLAGS",
                    "_PROFILING_FLAGS",
                    "_RTS_FLAGS",
                    "_StgCFinalizerList",
                    "_StgEntCounter",
                    "_StgMutArrPtrs",
                    "_StgOrigThunkInfoFrame",
                    "_StgStableName",
                    "_StgUpdateFrame",
                    "_StgWeak",
                    "_TICKY_FLAGS",
                    "_TRACE_FLAGS",
                    "generation_",
                    "generation_",
                    "nursery_",
                ] {
                    insert_ident(&mut hs, s);
                }
                hs
            },
            types: {
                let mut hs = HashSet::new();
                for s in [
                    "AdjustorExecutable",
                    "AdjustorWritable",
                    "CapabilityPublic",
                    "EventLogStatus",
                    "HsFunPtr",
                    "HsPtr",
                    "KernelThreadId",
                    "ListBlocksCb",
                    "ListRootsCb",
                    "ListThreadsCb",
                    "MessageThrowTo",
                    "MessageWakeup",
                    "RtsMsgFunction",
                    "RtsMsgFunctionRetLen",
                    "RtsOptsEnabledEnum",
                    "SchedulerStatus",
                    "StgByteArray",
                    "StgCode",
                    "StgFun",
                    "StgFunPtr",
                    "StgHalfInt",
                    "StgInfoTablePtr",
                    "StgOffset",
                    "StgPromptTag",
                    "StgSRTField",
                    "StgTRecChunk",
                    "StgTSOPtr",
                    "StgThreadID",
                    "StgThreadReturnCode",
                    "StgThunk",
                    "StgThunkInfoTable",
                    "StgVolatilePtr",
                    "StringIdx",
                    "TRecState",
                    "ThreadLocalKey",
                    "memcount",
                ] {
                    insert_ident(&mut hs, s);
                }
                hs
            },
        }
    }

    pub fn is_internal_const(&self, ident: &Ident) -> bool {
        self.consts.contains(ident)
    }

    pub fn is_internal_func(&self, ident: &Ident) -> bool {
        self.funcs.contains(ident)
    }

    pub fn is_internal_static(&self, ident: &Ident) -> bool {
        self.statics.contains(ident)
    }

    pub fn is_internal_type(&self, ident: &Ident) -> bool {
        self.types.contains(ident)
    }
}
